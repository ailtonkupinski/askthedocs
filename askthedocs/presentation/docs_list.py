"""
Interface de Lista de Documenta√ß√µes

Este m√≥dulo implementa a interface para listar todas as documenta√ß√µes
dispon√≠veis com seus metadados (nome, URL, vers√£o, data de inser√ß√£o).
Permite selecionar documenta√ß√µes para uso no chat.
"""

import streamlit as st
import json
import os
from pathlib import Path
from datetime import datetime

def show():
    """
    Exibe a lista de documenta√ß√µes em formato de tabela.
    
    Funcionalidades:
    - Carrega metadados do √≠ndice global ou varre diret√≥rios
    - Exibe tabela com Nome, URL, Vers√£o, Data da inser√ß√£o
    - Permite selecionar documenta√ß√£o para uso no chat
    """
    st.header("üìö Lista de Documenta√ß√µes")
    
    # Carrega dados das documenta√ß√µes
    collections_data = _load_collections_data()
    
    if not collections_data:
        st.info("Nenhuma documenta√ß√£o encontrada. Use 'Add doc' para adicionar uma nova documenta√ß√£o.")
        return
    
    # Exibe estat√≠sticas
    st.metric("Total de documenta√ß√µes", len(collections_data))
    
    # Cria tabela com os dados
    _display_collections_table(collections_data)

def _load_collections_data():
    """
    Carrega dados das cole√ß√µes do √≠ndice global ou varre diret√≥rios.
    
    Returns:
        list: Lista de dicion√°rios com metadados das cole√ß√µes
    """
    try:
        # Tenta carregar do √≠ndice global primeiro
        index_file = Path("data/collections/index.json")
        if index_file.exists():
            with open(index_file, "r", encoding="utf-8") as f:
                return json.load(f)
        
        # Se n√£o existe √≠ndice, varre diret√≥rios
        return _scan_collections_directories()
        
    except Exception as e:
        st.error(f"Erro ao carregar dados das cole√ß√µes: {str(e)}")
        return []

def _scan_collections_directories():
    """
    Varre diret√≥rios de cole√ß√µes para encontrar metadados.
    
    Returns:
        list: Lista de dicion√°rios com metadados das cole√ß√µes
    """
    collections = []
    collections_path = Path("data/collections")
    
    if not collections_path.exists():
        return collections
    
    for item in collections_path.iterdir():
        if item.is_dir():
            metadata_file = item / "metadata.json"
            if metadata_file.exists():
                try:
                    with open(metadata_file, "r", encoding="utf-8") as f:
                        metadata = json.load(f)
                        collections.append(metadata)
                except Exception as e:
                    print(f"Erro ao carregar metadados de {item.name}: {str(e)}")
    
    return collections

def _display_collections_table(collections_data):
    """
    Exibe tabela com as cole√ß√µes de documenta√ß√£o.
    
    Args:
        collections_data (list): Lista de metadados das cole√ß√µes
    """
    # Prepara dados para exibi√ß√£o
    table_data = []
    for collection in collections_data:
        # Formata data de inser√ß√£o
        inserted_at = collection.get("inserted_at", "")
        if inserted_at:
            try:
                dt = datetime.fromisoformat(inserted_at.replace('Z', '+00:00'))
                formatted_date = dt.strftime("%d/%m/%Y %H:%M")
            except:
                formatted_date = inserted_at
        else:
            formatted_date = "N/A"
        
        table_data.append({
            "Nome": collection.get("name", "N/A"),
            "URL": collection.get("url", "N/A"),
            "Vers√£o": collection.get("version", "N/A"),
            "Data da inser√ß√£o": formatted_date,
            "Arquivos": collection.get("files_count", 0)
        })
    
    # Ordena por data de inser√ß√£o (mais recente primeiro)
    table_data.sort(key=lambda x: x["Data da inser√ß√£o"], reverse=True)
    
    # Exibe tabela
    if table_data:
        # Cria colunas para tabela e bot√µes
        for i, row in enumerate(table_data):
            col1, col2, col3, col4, col5, col6 = st.columns([3, 4, 2, 3, 1, 2])
            
            with col1:
                st.write(f"**{row['Nome']}**")
            with col2:
                # Trunca URL se muito longa
                url = row['URL']
                if len(url) > 50:
                    url = url[:47] + "..."
                st.write(url)
            with col3:
                st.write(row['Vers√£o'])
            with col4:
                st.write(row['Data da inser√ß√£o'])
            with col5:
                st.write(f"{row['Arquivos']}")
            with col6:
                if st.button("Usar", key=f"use_{row['Nome']}_{i}"):
                    st.session_state.collection = row['Nome']
                    st.success(f"Documenta√ß√£o '{row['Nome']}' selecionada!")
                    st.rerun()
            
            st.divider()
    else:
        st.info("Nenhuma documenta√ß√£o encontrada.")
